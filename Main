import java.util.LinkedList;
import java.util.Queue;
import java.io.*;
import java.util.*;
class Node {
	int data;
	Node left;
	Node right;
	Node(int data) {
		this.data = data;
		left = null;
		right = null;
	}
}
public class GfG { 
	static Node buildTree(String str) {
		if (str.length() == 0 || str.charAt(0) == 'N') {
			return null;
		}
		String ip[] = str.split(" ");
		Node root = new Node(Integer.parseInt(ip[0]));
		Queue<Node> queue = new LinkedList<>();
		queue.add(root);
		int i = 1;
		while (queue.size() > 0 && i < ip.length) {
			Node currNode = queue.peek();
			queue.remove();
			String currVal = ip[i];
			if (!currVal.equals("N")) {
				currNode.left = new Node(Integer.parseInt(currVal));
				queue.add(currNode.left);
			}
			i++;
			if (i >= ip.length)
				break;
			currVal = ip[i];
			if (!currVal.equals("N")) {
				currNode.right = new Node(Integer.parseInt(currVal));
				queue.add(currNode.right);
			}
			i++;
		}
		return root;
	}
	static void printInorder(Node root) {
		if (root == null)
			return;
		printInorder(root.left);
		System.out.print(root.data + " ");
		printInorder(root.right);
	}
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine());
		while (t > 0) {
			String s = br.readLine();
			int target = Integer.parseInt(br.readLine());
			Node root = buildTree(s);
			Solution g = new Solution();
			System.out.println(g.minTime(root, target));
			t--;
		}
	}
}
class Solution
{
    public static Node start;
    public static void findParents(Node root,Node par,Map<Node,Node> hm,int target){
        if(root==null) return;
        hm.put(root,par);
        if(root.data==target) start=root;
        findParents(root.left,root,hm,target);
        findParents(root.right,root,hm,target);
    }
    public static int minTime(Node root, int target) 
    {
        if(root==null) return 0;
        Map<Node,Node> hm=new HashMap<>();
        start=null;
        findParents(root,null,hm,target);
        int time=0;
        Queue<Node> q=new LinkedList<>();
        Set<Node> vis=new HashSet<>();
        q.add(start);
        vis.add(start);
        while(!q.isEmpty()){
            int n=q.size();
            for(int i=0;i<n;i++){
                Node curr=q.poll();
                if(curr.left!=null && !vis.contains(curr.left)){
                    q.add(curr.left);
                    vis.add(curr.left);
                }
                if(curr.right!=null && !vis.contains(curr.right)){
                    q.add(curr.right);
                    vis.add(curr.right);
                }
                if(hm.get(curr)!=null && !vis.contains(hm.get(curr))){
                    q.add(hm.get(curr));
                    vis.add(hm.get(curr));
                }
            }
            time++;
        }
        return time-1;
    }
}
